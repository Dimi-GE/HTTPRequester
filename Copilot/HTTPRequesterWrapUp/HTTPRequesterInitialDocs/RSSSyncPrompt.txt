Hey there!
I need you to help me to think through the functionality. Here is the overall idea: I'm working on a plug-in for Unreal engine 5, which would serve as an internal version of source control tool. It would still require from users having a GitHub account in order to store files, but would reduce interactions outside the unreal. At least for smaller files. It is an MVP in progress.

What I need you to help me with is the following: I need to create a flow, which would allow downloading a branch from GitHub, unpack ZIP into a temporary folder, calculate recursively calculate hashes per files and directories, create a JSON structure and compare this with the local JSON structure in order to identify if there are any files are differ or missed.

Work on this very hard, to achieve the maximum precision. At the end, give me a percentage of likelihood I will be able to implement/modify code with a full understanding of what I am doing. You can analyse the following files from the project:
CustomUtilities.cpp
ZipHandler.cpp
MacrosManager.cpp
Those files contain all the required functions for that purpose. Don't change the source files, but create new one, where all the logic will be stored. Please, follow this structure:
1. A brief function description.
2. Complete function definition, including comments per steps.

Keep those functions separated per responsibility according to the following flow:
1. Create a temporary folder named `RSSSync`, where the ZIP will be downloaded and unpacked.
2. Send request for downloading branch and save it to RSSSync folder, preserving a false/true result, so the flow can decide if it can go to the next step.
3. Unpack the downloaded branch, removing initial ZIP.
4. Within same folder, create a manifest JSON file, named `RemoteRSSManifest`, utilizing the RSSManifestInit_UTIL() function.
5. Check if there is a `LocalRSSManifest` JSON file within RSS folder inside the project. If there is not, create the file using the RSSManifestInit_UTIL() function.
6. Craft a function for comparing `LocalRSSManifest` and `RemoteRSSManifest` files by hashes, which would return an array of strings. Here is a list of potential sub-steps and requirements:
	6.a By default, this function should prioritize new files above the older ones - depending on results from `LocalRSSManifest` and `RemoteRSSManifest`, it should add to the list the file, which has the most recent updates.
	6.b	The function should get a Boolean as an argument - if set to false, the function should return the list of files, which supposed to be added/overwritten for keeping those up to date for both, local and remote repositories. But do not perform any further action. It would be great to have this list saved locally as a JSON structure, similar to the manifests. Let's name it RSSDifferences.
	6.c If set to true - the function should return the list of files, which are supposed to be added/overwritten, and proceed further.
7. Craft a function, which would read the RSSDifferences JSON structure, and perform adding/overwriting action on those files, depending on repository - local or remote.
8. Craft a function, which would update both manifests, depending on changes that was done. For easiness of process, you can use the same function, - RSSManifestInit_UTIL(), - but add an additional step, which would remove the older file, if exists, and create a new one.
9. Add a function, which would pack the updated branch into ZIP file.
10. Craft a function, which would send the request for posting this branch back to the GitHub.

Make the guide above as beginned-friendly, as it is possible, including and explaining intermediate steps if required. Pay attention to details, like prompting for credentials, if required, to send the POST request to GitHub. This file should serve as a comprehensive explanation, giving user a step-by-step guidance.

Name the file RSSSyncGuidance, and save the file under the following path:
D:\[DGE]\Copilot\HTTPRequester\

At the end, save this onversation as RSSSyncChat under the following path:
D:\[DGE]\Copilot\HTTPRequester\

Make a separate document, pointing out my logical mistakes step by step as you getting through creation of the requested functionality. Name it RSSSyncMistakes, and save it under the following path:
D:\[DGE]\Copilot\HTTPRequester\